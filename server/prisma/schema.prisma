// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model CartItem {
  id         String   @id @default(uuid())
  position   Position @relation(name: "CartItemToPosition", fields: [positionId], references: [id])
  positionId String
  cart       Cart     @relation(name: "CartToCartItem", fields: [cartId], references: [id])
  cartId     String
  amount     Int
}

model Cart {
  id    String     @id @default(uuid())
  items CartItem[] @relation(name: "CartToCartItem")
}

model Position {
  id          String     @id @default(uuid())
  inCartItems CartItem[] @relation(name: "CartItemToPosition")
  title       String
  description String
  path        String
  price       Float
  products    Product[]  @relation(name: "PositionToProduct")
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(name: "OrderToOrderItem", fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(name: "OrderItemToProduct", fields: [productId], references: [id])
  productId String  @unique
}

model Order {
  id          String      @id @default(uuid())
  items       OrderItem[] @relation(name: "OrderToOrderItem")
  user        User        @relation(name: "OrderToUser", fields: [userId], references: [id])
  userId      String
  email       String
  amount      Float
  paymentType OrderType
  status      OrderStatus
}

model Product {
  id         String     @id @default(uuid())
  orderItem  OrderItem? @relation(name: "OrderItemToProduct")
  position   Position   @relation(name: "PositionToProduct", fields: [positionId], references: [id])
  positionId String
  value      String
  isBuyed    Boolean    @default(false)
}

model User {
  id       String    @id @default(uuid())
  orders   Order[]   @relation(name: "OrderToUser")
  deposits Deposit[] @relation(name: "DepositToUser")
  email    String    @unique
  password String
  balance  Float     @default(0)
  currency Currency  @default(RUB)
}

model Deposit {
  id        String        @id @default(uuid())
  user      User          @relation(name: "DepositToUser", fields: [userId], references: [id])
  userId    String
  type      DepositType
  amount    Float
  status    DepositStatus @default(PROCESSING)
  data      String
  createdAt DateTime      @default(now())
}

enum OrderType {
  BALANCE
  CRYPTO
  RUCARD
  WORLDCARD
}

enum OrderStatus {
  PROCESSING
  SUCCESS
  CANCELLED
}

enum DepositType {
  CRYPTO
  RUCARD
  WORLDCARD
}

enum DepositStatus {
  PROCESSING
  SUCCESS
  CANCELLED
}

enum Currency {
  USD
  RUB
}
